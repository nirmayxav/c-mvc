Step 1: Create a New ASP.NET Core MVC Project
Open Visual Studio:

Go to File > New > Project.
Select ASP.NET Core Web Application and click Next.
Name the project (e.g., ImageGallery) and click Create.
Select a Project Template:

Choose ASP.NET Core Web App (Model-View-Controller).
Click Create.
Step 2: Set Up the Model for Images
Create the Image Model:

Right-click on the Models folder and select Add > Class.
Name the class ImageModel.cs.
Add the following code to define the properties:


Right-click on the Data folder and select Add > Class.
Name it ApplicationDbContext.cs.



Open appsettings.json and add the connection string for SQLite:
json
Copy code

"ConnectionStrings": {
    "DefaultConnection": "Data Source=ImageGallery.db"
}


Open Startup.cs and add the database context to the services:
csharp
Copy code

public void ConfigureServices(IServiceCollection services)
{
    services.AddDbContext<ApplicationDbContext>(options =>
        options.UseSqlite(Configuration.GetConnectionString("DefaultConnection")));

    services.AddControllersWithViews();
}

Apply Migrations:

Open the Package Manager Console (Tools > NuGet Package Manager > Package Manager Console) and run the following commands:
powershell
Copy code

Add-Migration InitialCreate
Update-Database


Step 4: Create the Image Controller
Add the Controller:
Right-click on the Controllers folder and select Add > Controller.
Choose MVC Controller with views, using Entity Framework.
Select ImageModel as the model class and ApplicationDbContext as the data context.
Name the controller ImagesController.
Step 5: Create the Views
View for Displaying Images:

In the Views/Images folder, open Index.cshtml and modify it to display images in a gallery format:



Open appsettings.json and add the connection string for SQLite:
json
Copy code
"ConnectionStrings": {
    "DefaultConnection": "Data Source=ImageGallery.db"
}
Open Startup.cs and add the database context to the services:
csharp
Copy code
public void ConfigureServices(IServiceCollection services)
{
    services.AddDbContext<ApplicationDbContext>(options =>
        options.UseSqlite(Configuration.GetConnectionString("DefaultConnection")));

    services.AddControllersWithViews();
}
Apply Migrations:

Open the Package Manager Console (Tools > NuGet Package Manager > Package Manager Console) and run the following commands:
powershell
Copy code
Add-Migration InitialCreate
Update-Database
Step 4: Create the Image Controller
Add the Controller:
Right-click on the Controllers folder and select Add > Controller.
Choose MVC Controller with views, using Entity Framework.
Select ImageModel as the model class and ApplicationDbContext as the data context.
Name the controller ImagesController.
Step 5: Create the Views
View for Displaying Images:

In the Views/Images folder, open Index.cshtml and modify it to display images in a gallery format:

Locate the ImagesController.cs file:

Open the Solution Explorer in Visual Studio.
Navigate to the Controllers folder.
Double-click on ImagesController.cs to open it.
Modify the Create Method:

Find the Create method in the ImagesController.cs file.
Replace the existing code with the updated code that handles image uploads using IFormFile as shown earlier:
csharp
Copy code
[HttpPost]
[ValidateAntiForgeryToken]
public async Task<IActionResult> Create(ImageModel imageModel, IFormFile ImageFile)
{
    if (ModelState.IsValid)
    {
        if (ImageFile != null && ImageFile.Length > 0)
        {
            using (var memoryStream = new MemoryStream())
            {
                await ImageFile.CopyToAsync(memoryStream);
                imageModel.ImageData = memoryStream.ToArray();
                imageModel.ContentType = ImageFile.ContentType;
            }
            _context.Add(imageModel);
            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }
    }
    return View(imageModel);
}
Verify the Delete Method:

Ensure the Delete method is correctly implemented, which should have been automatically generated when you created the controller using scaffolding. This method should already work for deleting images from the database.
Save the Changes:

After updating the code, save the changes in ImagesController.cs.

Integrate Bootstrap:

Add Bootstrap CDN to the Layout.cshtml in the Views/Shared folder:
html
Copy code
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
Customize the Style:

Use Bootstrap classes and customize your CSS to make the gallery look more appealing.
Step 8: Run the Application
Build and Run:
Press F5 to build and run the application.
Test uploading and deleting images.
